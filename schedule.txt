硬件加电自检与 BIOS 启动
    1. 计算机接通电源后，硬件进行加电自检
    2. 固化在主板上的程序 BIOS 开始执行初始化操作，为引导过程做准备
    3. BIOS 根据预设顺序从存储设备引导扇区读取引导代码

引导加载程序执行
    1. BIOS 将硬盘引导扇区内代码加载入内存，将控制权交给代码
    2. boot_first_cpu.S 进行初始化操作，关闭中断、清零段寄存器、启用 A20 地址线，
    3. 处理器由实模式切换至 32-bit 保护模式，加载全局描述符表(GDT)、设置控制寄存器(cr0)
    4. 完成模式切换和初始化后，调用 bootmain()
    
内核镜像加载
    1. bootmain() 从磁盘的第 1 扇区开始读取 ELF格式的内核镜像(内核代码、数据、符号表)
    2. bootmain() 解析 ELFhdr，获取内核的入口地址、各个段的信息(如代码段、数据段等)并加载到内存
    3. bootmain() 跳转到内核入口，将控制权交给内核

操作系统内核启动
    1. 内核入口(entry)开始执行，开启 4MB 页面扩展，设置页目录
    2. 开启分页功能，同时开启保护模式、分页功能和写保护功能
    3. 设置栈指针，并分配 KSTACKSIZE 大小的栈
    4. 跳转到main()，切换到高地址执行内核代码
    
系统服务启动与用户交互阶段
    1. 内核初始化完成后，启动各种系统服务和守护进程
    2. 操作系统显示登录界面，等待用户登录，运行程序

kernel.ld           32 位 x86 ELF 链接脚本，设格式、架构、入口，规划段布局，定起止符，对齐地址，弃特定段
asm.h               定义空段描述符、完整段描述符和段属性
elf.h               ELFhdr + Proghdr
boot_first_cpu.S    启动首个 CPU 并切换到 32 位保护模式
boot_append_cpu.S   启动其他 CPU
bootmain.c          从磁盘加载 ELF 格式内核镜像，校验格式后将各段加载到内存，处理额外内存清零，最后跳转至内核入口点执行
entry.S             xv6 内核的起始部分，设置 Multiboot 头，指定 ELF 入口，开启 4MB 页面扩展和分页功能，设置栈指针，跳转到 main() 

disk.h 
buffer.h
file.h

spinlock.h          自旋锁
spinlock.c          自旋锁功能实现
sleeplock.h         睡眠锁

param.h
types.h

allocator.c
memlayout.h



add file.c string.c x86.h